# This workflow updates the version text, then builds and attaches a build to the release that triggered it
name: 'Create Release'

# Controls when the action will run. 
on:
  release:
    types: [ released, prereleased ]
  
jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
          
      # Updates the version txt, and sets which version file is used depending on whether event that triggered workflow was a release or prerelease
      - name: Update version.txt version
        run: |
          if [[ "${{ github.event.action }}" == "released" ]]; then
            VERSION_FILE="version.txt"
          else
            VERSION_FILE="version_prerelease.txt"
          fi
          echo "VERSION_FILE=$VERSION_FILE" >> $GITHUB_ENV
          
          echo "Updating: $VERSION_FILE"
          echo '${{ github.event.release.tag_name }}' | sed 's/[^0-9]*//' > CompilePalX/$VERSION_FILE
          
      # Updates version.txt on Github
      - name: Update version.txt on GitHub
        uses: test-room-7/action-update-file@v1.4.0
        with:
            file-path: CompilePalX/${{ env.VERSION_FILE }}
            commit-msg: Update version
            github-token: ${{ secrets.GITHUB_TOKEN }}
  create-build:
    runs-on: windows-latest
    needs: [update-version]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.5
      
      - name: Restore NuGet Packages
        run: nuget restore CompilePalX.sln
      
      - name: Set Env Variables
        run: |
          if ( "${{ github.event.action }}" -eq "released" ) {
            $CONFIGURATION="Release"
          } else {
            $CONFIGURATION="Debug"
          }
          $VERSION=$('${{ github.event.release.tag_name }}' -replace "[^0-9|.]")
          
          echo "Configuration: $CONFIGURATION"
          echo "Version: $VERSION"
          
          echo "CONFIGURATION=${CONFIGURATION}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VERSION=${VERSION}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Build Compile Pal
        run: msbuild CompilePalX.sln /p:Configuration=${{ env.CONFIGURATION }}
      
      - name: test
        run: |
          pwd
          ls
          ls bin
      
      # Package Compile Pal into zip file
      - name: Package Compile Pal
        run: |
          $compress = @{
            Path = "bin\${{ env.CONFIGURATION }}"
            CompressionLevel = "Optimal"
            DestinationPath = "bin\Compile Pal ${{ env.VERSION }}.zip"
          }
          Compress-Archive @compress
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        with:
          # The URL for uploading assets to the release
          upload_url: ${{ github.event.release.upload_url }}
          # The path to the asset you want to upload
          asset_path: bin\Compile Pal ${{ env.VERSION }}.zip
          # The name of the asset you want to upload
          asset_name: bin\Compile Pal ${{ env.VERSION }}.zip
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/zip
